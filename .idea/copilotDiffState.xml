<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/mybatis-plus-generator/pom.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/mybatis-plus-generator/pom.xml" />
              <option name="originalContent" value="&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;  xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&#10;  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#10;&#10;  &lt;groupId&gt;com.ruoyi&lt;/groupId&gt;&#10;  &lt;artifactId&gt;mybatis-plus-generator&lt;/artifactId&gt;&#10;  &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;&#10;  &lt;packaging&gt;jar&lt;/packaging&gt;&#10;&#10;  &lt;name&gt;mybatis-plus-generator&lt;/name&gt;&#10;  &lt;url&gt;http://maven.apache.org&lt;/url&gt;&#10;&#10;  &lt;properties&gt;&#10;    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;&#10;    &lt;maven.compiler.source&gt;8&lt;/maven.compiler.source&gt;&#10;    &lt;maven.compiler.target&gt;8&lt;/maven.compiler.target&gt;&#10;  &lt;/properties&gt;&#10;&#10;  &lt;dependencies&gt;&#10;    &lt;dependency&gt;&#10;      &lt;groupId&gt;com.baomidou&lt;/groupId&gt;&#10;      &lt;artifactId&gt;mybatis-plus-generator&lt;/artifactId&gt;&#10;      &lt;version&gt;3.5.12&lt;/version&gt;&#10;    &lt;/dependency&gt;&#10;    &lt;dependency&gt;&#10;      &lt;groupId&gt;org.mybatis&lt;/groupId&gt;&#10;      &lt;artifactId&gt;mybatis&lt;/artifactId&gt;&#10;      &lt;version&gt;3.5.13&lt;/version&gt;&#10;    &lt;/dependency&gt;&#10;    &lt;dependency&gt;&#10;      &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;&#10;      &lt;artifactId&gt;junit-jupiter&lt;/artifactId&gt;&#10;      &lt;version&gt;5.9.3&lt;/version&gt;&#10;      &lt;scope&gt;test&lt;/scope&gt;&#10;    &lt;/dependency&gt;&#10;  &lt;/dependencies&gt;&#10;&#10;  &lt;build&gt;&#10;    &lt;plugins&gt;&#10;      &lt;plugin&gt;&#10;        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#10;        &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;&#10;        &lt;version&gt;3.11.0&lt;/version&gt;&#10;        &lt;configuration&gt;&#10;          &lt;source&gt;8&lt;/source&gt;&#10;          &lt;target&gt;8&lt;/target&gt;&#10;        &lt;/configuration&gt;&#10;      &lt;/plugin&gt;&#10;      &lt;plugin&gt;&#10;        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#10;        &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;&#10;        &lt;version&gt;3.0.0&lt;/version&gt;&#10;      &lt;/plugin&gt;&#10;    &lt;/plugins&gt;&#10;  &lt;/build&gt;&#10;&lt;/project&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;&#10;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&#10;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#10;&#10;    &lt;groupId&gt;com.ruoyi&lt;/groupId&gt;&#10;    &lt;artifactId&gt;mybatis-plus-generator&lt;/artifactId&gt;&#10;    &lt;version&gt;1.0.0&lt;/version&gt;&#10;    &lt;packaging&gt;jar&lt;/packaging&gt;&#10;&#10;    &lt;name&gt;mybatis-plus-generator&lt;/name&gt;&#10;    &lt;description&gt;MyBatis-Plus 代码生成器示例&lt;/description&gt;&#10;&#10;    &lt;properties&gt;&#10;        &lt;maven.compiler.source&gt;8&lt;/maven.compiler.source&gt;&#10;        &lt;maven.compiler.target&gt;8&lt;/maven.compiler.target&gt;&#10;        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;&#10;        &lt;mybatis-plus.version&gt;3.5.3&lt;/mybatis-plus.version&gt;&#10;        &lt;junit.version&gt;5.9.2&lt;/junit.version&gt;&#10;    &lt;/properties&gt;&#10;&#10;    &lt;dependencies&gt;&#10;        &lt;!-- MyBatis-Plus 核心依赖 --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;com.baomidou&lt;/groupId&gt;&#10;            &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;&#10;            &lt;version&gt;${mybatis-plus.version}&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- MyBatis-Plus 代码生成器 --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;com.baomidou&lt;/groupId&gt;&#10;            &lt;artifactId&gt;mybatis-plus-generator&lt;/artifactId&gt;&#10;            &lt;version&gt;${mybatis-plus.version}&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- 模板引擎，MyBatis-Plus 代码生成器需要 --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.apache.velocity&lt;/groupId&gt;&#10;            &lt;artifactId&gt;velocity-engine-core&lt;/artifactId&gt;&#10;            &lt;version&gt;2.3&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- H2 数据库，用于测试 --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;com.h2database&lt;/groupId&gt;&#10;            &lt;artifactId&gt;h2&lt;/artifactId&gt;&#10;            &lt;version&gt;2.1.214&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- MySQL 驱动 --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;mysql&lt;/groupId&gt;&#10;            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;&#10;            &lt;version&gt;8.0.33&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- JUnit 5 测试框架 --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;&#10;            &lt;artifactId&gt;junit-jupiter&lt;/artifactId&gt;&#10;            &lt;version&gt;${junit.version}&lt;/version&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- SLF4J 日志 --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.slf4j&lt;/groupId&gt;&#10;            &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;&#10;            &lt;version&gt;1.7.36&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;&#10;            &lt;artifactId&gt;logback-classic&lt;/artifactId&gt;&#10;            &lt;version&gt;1.2.12&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;    &lt;/dependencies&gt;&#10;&#10;    &lt;build&gt;&#10;        &lt;plugins&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#10;                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;&#10;                &lt;version&gt;3.8.1&lt;/version&gt;&#10;                &lt;configuration&gt;&#10;                    &lt;source&gt;8&lt;/source&gt;&#10;                    &lt;target&gt;8&lt;/target&gt;&#10;                    &lt;encoding&gt;UTF-8&lt;/encoding&gt;&#10;                &lt;/configuration&gt;&#10;            &lt;/plugin&gt;&#10;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#10;                &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;&#10;                &lt;version&gt;2.22.2&lt;/version&gt;&#10;            &lt;/plugin&gt;&#10;        &lt;/plugins&gt;&#10;    &lt;/build&gt;&#10;&lt;/project&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/mybatis-plus-generator/src/main/java/com/ruoyi/MySQLGeneratorTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/mybatis-plus-generator/src/main/java/com/ruoyi/MySQLGeneratorTest.java" />
              <option name="originalContent" value="package com.ruoyi;&#10;&#10;import com.baomidou.mybatisplus.generator.AutoGenerator;&#10;import com.baomidou.mybatisplus.generator.config.DataSourceConfig;&#10;import org.junit.jupiter.api.Test;&#10;&#10;/**&#10; * MySQL 代码生成&#10; *&#10; * @author lanjerry&#10; * @since 3.5.3&#10; */&#10;public class MySQLGeneratorTest extends BaseGeneratorTest {&#10;&#10;    /**&#10;     * 数据源配置&#10;     */&#10;    private static final DataSourceConfig DATA_SOURCE_CONFIG = new DataSourceConfig&#10;            .Builder(&quot;jdbc:mysql://xxxx:3306/baomidou?serverTimezone=Asia/Shanghai&quot;, &quot;root&quot;, &quot;123456&quot;)&#10;            .schema(&quot;baomidou&quot;)&#10;            .build();&#10;&#10;    @Test&#10;    public void testSimple() {&#10;        AutoGenerator generator = new AutoGenerator(DATA_SOURCE_CONFIG);&#10;        generator.strategy(strategyConfig().build());&#10;        generator.global(globalConfig().build());&#10;        generator.execute();&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.ruoyi;&#10;&#10;import com.baomidou.mybatisplus.generator.AutoGenerator;&#10;import com.baomidou.mybatisplus.generator.config.DataSourceConfig;&#10;import org.junit.jupiter.api.Test;&#10;&#10;/**&#10; * MySQL 代码生成&#10; *&#10; * @author lanjerry&#10; * @since 3.5.3&#10; */&#10;public class MySQLGeneratorTest extends BaseGeneratorTest {&#10;&#10;    /**&#10;     * 数据源配置&#10;     */&#10;    private static final DataSourceConfig DATA_SOURCE_CONFIG = new DataSourceConfig&#10;            .Builder(&quot;jdbc:mysql://xxxx:3306/baomidou?serverTimezone=Asia/Shanghai&quot;, &quot;root&quot;, &quot;123456&quot;)&#10;            .schema(&quot;baomidou&quot;)&#10;            .build();&#10;&#10;    @Test&#10;    public void testSimple() {&#10;        AutoGenerator generator = new AutoGenerator(DATA_SOURCE_CONFIG);&#10;        generator.strategy(strategyConfig().build());&#10;        generator.global(globalConfig().build());&#10;        generator.execute();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/mybatis-plus-generator/src/test/java/com/ruoyi/H2CodeGeneratorTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/mybatis-plus-generator/src/test/java/com/ruoyi/H2CodeGeneratorTest.java" />
              <option name="originalContent" value="package com.ruoyi;&#10;&#10;import com.baomidou.mybatisplus.annotation.FieldFill;&#10;import com.baomidou.mybatisplus.generator.AutoGenerator;&#10;import com.baomidou.mybatisplus.generator.config.DataSourceConfig;&#10;import com.baomidou.mybatisplus.generator.config.OutputFile;&#10;import com.baomidou.mybatisplus.generator.config.StrategyConfig;&#10;import com.baomidou.mybatisplus.generator.config.builder.CustomFile;&#10;import com.baomidou.mybatisplus.generator.fill.Column;&#10;import com.baomidou.mybatisplus.generator.fill.Property;&#10;import com.baomidou.mybatisplus.generator.query.SQLQuery;&#10;import org.junit.jupiter.api.BeforeAll;&#10;import org.junit.jupiter.api.Test;&#10;&#10;import java.sql.SQLException;&#10;import java.util.ArrayList;&#10;import java.util.HashMap;&#10;import java.util.List;&#10;import java.util.Map;&#10;&#10;/**&#10; * H2 代码生成&#10; *&#10; * @author hubin, lanjerry&#10; * @since 3.5.3&#10; */&#10;public class H2CodeGeneratorTest extends BaseGeneratorTest {&#10;&#10;    /**&#10;     * 执行初始化数据库脚本&#10;     */&#10;    @BeforeAll&#10;    public static void before() throws SQLException {&#10;        initDataSource(DATA_SOURCE_CONFIG);&#10;    }&#10;&#10;    /**&#10;     * 策略配置&#10;     */&#10;    public static StrategyConfig.Builder strategyConfig() {&#10;        return new StrategyConfig.Builder().addInclude(&quot;t_simple&quot;); // 设置需要生成的表名&#10;    }&#10;&#10;    /**&#10;     * 数据源配置&#10;     */&#10;    private static final DataSourceConfig DATA_SOURCE_CONFIG = new DataSourceConfig&#10;            .Builder(&quot;jdbc:h2:mem:test;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE;CASE_INSENSITIVE_IDENTIFIERS=TRUE;MODE=MYSQL&quot;, &quot;sa&quot;, &quot;&quot;)&#10;            .databaseQueryClass(SQLQuery.class) // 设置SQL查询方式，默认的是元数据查询方式&#10;            .build();&#10;&#10;    /**&#10;     * 简单生成&#10;     */&#10;    @Test&#10;    public void testSimple() {&#10;        AutoGenerator generator = new AutoGenerator(DATA_SOURCE_CONFIG);&#10;        generator.strategy(strategyConfig().build());&#10;        generator.global(globalConfig().build());&#10;        generator.execute();&#10;    }&#10;&#10;    /**&#10;     * 过滤表前缀（后缀同理，支持多个）&#10;     * result: t_simple -&gt; simple&#10;     */&#10;    @Test&#10;    public void testTablePrefix() {&#10;        AutoGenerator generator = new AutoGenerator(DATA_SOURCE_CONFIG);&#10;        generator.strategy(strategyConfig().addTablePrefix(&quot;t_&quot;, &quot;c_&quot;).build());&#10;        generator.global(globalConfig().build());&#10;        generator.execute();&#10;    }&#10;&#10;    /**&#10;     * 过滤字段后缀（前缀同理，支持多个）&#10;     * result: deleted_flag -&gt; deleted&#10;     */&#10;    @Test&#10;    public void testFieldSuffix() {&#10;        AutoGenerator generator = new AutoGenerator(DATA_SOURCE_CONFIG);&#10;        generator.strategy(strategyConfig().addFieldSuffix(&quot;_flag&quot;).build());&#10;        generator.global(globalConfig().build());&#10;        generator.execute();&#10;    }&#10;&#10;    /**&#10;     * 乐观锁字段设置&#10;     * result: 新增@Version注解&#10;     * 填充字段设置&#10;     * result: 新增@TableField(value = &quot;xxx&quot;, fill = FieldFill.xxx)注解&#10;     */&#10;    @Test&#10;    public void testVersionAndFill() {&#10;        AutoGenerator generator = new AutoGenerator(DATA_SOURCE_CONFIG);&#10;        generator.strategy(strategyConfig().entityBuilder()&#10;                .versionColumnName(&quot;version&quot;) // 基于数据库字段&#10;                .versionPropertyName(&quot;version&quot;)// 基于模型属性&#10;                .addTableFills(new Column(&quot;create_time&quot;, FieldFill.INSERT))    //基于数据库字段填充&#10;                .addTableFills(new Property(&quot;updateTime&quot;, FieldFill.INSERT_UPDATE))    //基于模型属性填充&#10;                .build());&#10;        generator.global(globalConfig().build());&#10;        generator.execute();&#10;    }&#10;&#10;    /**&#10;     * 逻辑删除字段设置&#10;     * result: 新增@TableLogic注解&#10;     * 忽略字段设置&#10;     * result: 不生成&#10;     */&#10;    @Test&#10;    public void testLogicDeleteAndIgnoreColumn() {&#10;        AutoGenerator generator = new AutoGenerator(DATA_SOURCE_CONFIG);&#10;        generator.strategy(strategyConfig().entityBuilder()&#10;                .logicDeleteColumnName(&quot;deleted&quot;) // 基于数据库字段&#10;                .logicDeletePropertyName(&quot;deleteFlag&quot;)// 基于模型属性&#10;                .addIgnoreColumns(&quot;age&quot;) // 基于数据库字段&#10;                .build());&#10;        generator.global(globalConfig().build());&#10;        generator.execute();&#10;    }&#10;&#10;    /**&#10;     * 重命名模板生成的文件名称&#10;     * result: TSimple -&gt; TSimpleEntity&#10;     */&#10;    @Test&#10;    public void testCustomTemplateName() {&#10;        AutoGenerator generator = new AutoGenerator(DATA_SOURCE_CONFIG);&#10;        generator.strategy(strategyConfig()&#10;                .entityBuilder().formatFileName(&quot;%sEntity&quot;)&#10;                .mapperBuilder().formatMapperFileName(&quot;%sDao&quot;).formatXmlFileName(&quot;%sXml&quot;)&#10;                .controllerBuilder().formatFileName(&quot;%sAction&quot;)&#10;                .serviceBuilder().formatServiceFileName(&quot;%sService&quot;).formatServiceImplFileName(&quot;%sServiceImp&quot;)&#10;                .build());&#10;        generator.global(globalConfig().build());&#10;        generator.execute();&#10;    }&#10;&#10;    /**&#10;     * 更改模板生成的文件路径&#10;     *&#10;     * @see OutputFile&#10;     */&#10;    @Test&#10;    public void testCustomTemplatePath() {&#10;        // 设置自定义路径&#10;        Map&lt;OutputFile, String&gt; pathInfo = new HashMap&lt;&gt;();&#10;        pathInfo.put(OutputFile.xml, &quot;D://&quot;);&#10;        pathInfo.put(OutputFile.entity, &quot;D://entity//&quot;);&#10;        AutoGenerator generator = new AutoGenerator(DATA_SOURCE_CONFIG);&#10;        generator.strategy(strategyConfig().build());&#10;        generator.packageInfo(packageConfig().pathInfo(pathInfo).build());&#10;        generator.global(globalConfig().build());&#10;        generator.execute();&#10;    }&#10;&#10;    /**&#10;     * 替换模板&#10;     */&#10;    @Test&#10;    public void testCustomTemplate() {&#10;        AutoGenerator generator = new AutoGenerator(DATA_SOURCE_CONFIG);&#10;        generator.strategy(strategyConfig().build());&#10;        generator.template(templateConfig()&#10;                .entity(&quot;/templates/entity1.java&quot;)&#10;                .build());&#10;        generator.global(globalConfig().build());&#10;        generator.execute();&#10;    }&#10;&#10;    /**&#10;     * 注入自定义属性&#10;     */&#10;    @Test&#10;    public void testCustomMap() {&#10;        // 设置自定义属性&#10;        Map&lt;String, Object&gt; map = new HashMap&lt;&gt;();&#10;        map.put(&quot;abc&quot;, 123);&#10;        AutoGenerator generator = new AutoGenerator(DATA_SOURCE_CONFIG);&#10;        generator.strategy(strategyConfig().build());&#10;        generator.template(templateConfig()&#10;                .entity(&quot;/templates/entity1.java&quot;)&#10;                .build());&#10;        generator.injection(injectionConfig().customMap(map).build());&#10;        generator.global(globalConfig().build());&#10;        generator.execute();&#10;    }&#10;&#10;    /**&#10;     * 自定义模板（Map）&#10;     * key为文件名称，value为文件路径&#10;     */&#10;    @Test&#10;    public void testCustomFileByMap() {&#10;        // 设置自定义输出文件&#10;        Map&lt;String, String&gt; customFile = new HashMap&lt;&gt;();&#10;        customFile.put(&quot;DTO.java&quot;, &quot;/templates/dto.java.vm&quot;);&#10;        AutoGenerator generator = new AutoGenerator(DATA_SOURCE_CONFIG);&#10;        generator.strategy(strategyConfig().build());&#10;        generator.injection(injectionConfig().customFile(customFile).build());&#10;        generator.global(globalConfig().build());&#10;        generator.execute();&#10;    }&#10;&#10;    /**&#10;     * 自定义模板（单个文件）&#10;     */&#10;    @Test&#10;    public void testCustomFileBySingle() {&#10;        // 设置自定义输出文件&#10;        CustomFile customFile = new CustomFile.Builder().fileName(&quot;DTO.java&quot;).templatePath(&quot;/templates/dto.java.vm&quot;).packageName(&quot;dto&quot;).build();&#10;        AutoGenerator generator = new AutoGenerator(DATA_SOURCE_CONFIG);&#10;        generator.strategy(strategyConfig().build());&#10;        generator.injection(injectionConfig().customFile(customFile).build());&#10;        generator.global(globalConfig().build());&#10;        generator.execute();&#10;    }&#10;&#10;    /**&#10;     * 自定义模板（列表）&#10;     */&#10;    @Test&#10;    public void testCustomFileByList() {&#10;        // 设置自定义输出文件&#10;        List&lt;CustomFile&gt; customFiles = new ArrayList&lt;&gt;();&#10;        customFiles.add(new CustomFile.Builder().fileName(&quot;DTO.java&quot;).templatePath(&quot;/templates/dto.java.vm&quot;).packageName(&quot;dto&quot;).build());&#10;        customFiles.add(new CustomFile.Builder().fileName(&quot;VO.java&quot;).templatePath(&quot;/templates/vo.java.vm&quot;).packageName(&quot;vo&quot;).build());&#10;        AutoGenerator generator = new AutoGenerator(DATA_SOURCE_CONFIG);&#10;        generator.strategy(strategyConfig().build());&#10;        generator.injection(injectionConfig().customFile(customFiles).build());&#10;        generator.global(globalConfig().build());&#10;        generator.execute();&#10;    }&#10;&#10;    /**&#10;     * 自定义模板（列表）&#10;     */&#10;    @Test&#10;    public void testCustomFileByLambda() {&#10;        // 设置自定义属性&#10;        Map&lt;String, Object&gt; map = new HashMap&lt;&gt;();&#10;        map.put(&quot;abc&quot;, 118);&#10;        // 设置自定义输出文件&#10;        AutoGenerator generator = new AutoGenerator(DATA_SOURCE_CONFIG);&#10;        generator.strategy(strategyConfig().build());&#10;        generator.injection(injectionConfig()&#10;                .customMap(map)&#10;                .customFile(file -&gt;&#10;                        file.fileName(&quot;DTO.java&quot;)&#10;                                .templatePath(&quot;/templates/dto.java.vm&quot;)&#10;                                .filePath(&quot;D://&quot;))&#10;                .customFile(file -&gt;&#10;                        file.fileName(&quot;VO.java&quot;)&#10;                                .templatePath(&quot;/templates/vo.java.vm&quot;)&#10;                                .enableFileOverride()&#10;                                .filePath(&quot;D://&quot;))&#10;                .build());&#10;        generator.global(globalConfig().build());&#10;        generator.execute();&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.ruoyi;&#10;&#10;import com.baomidou.mybatisplus.annotation.FieldFill;&#10;import com.baomidou.mybatisplus.generator.AutoGenerator;&#10;import com.baomidou.mybatisplus.generator.config.DataSourceConfig;&#10;import com.baomidou.mybatisplus.generator.config.OutputFile;&#10;import com.baomidou.mybatisplus.generator.config.StrategyConfig;&#10;import com.baomidou.mybatisplus.generator.config.builder.CustomFile;&#10;import com.baomidou.mybatisplus.generator.fill.Column;&#10;import com.baomidou.mybatisplus.generator.fill.Property;&#10;import com.baomidou.mybatisplus.generator.query.SQLQuery;&#10;import org.junit.jupiter.api.BeforeAll;&#10;import org.junit.jupiter.api.Test;&#10;&#10;import java.sql.SQLException;&#10;import java.util.ArrayList;&#10;import java.util.HashMap;&#10;import java.util.List;&#10;import java.util.Map;&#10;&#10;/**&#10; * H2 代码生成&#10; *&#10; * @author hubin, lanjerry&#10; * @since 3.5.3&#10; */&#10;public class H2CodeGeneratorTest extends BaseGeneratorTest {&#10;&#10;    /**&#10;     * 执行初始化数据库脚本&#10;     */&#10;    @BeforeAll&#10;    public static void before() throws SQLException {&#10;        initDataSource(DATA_SOURCE_CONFIG);&#10;    }&#10;&#10;    /**&#10;     * 策略配置&#10;     */&#10;    public static StrategyConfig.Builder strategyConfig() {&#10;        return new StrategyConfig.Builder().addInclude(&quot;t_simple&quot;); // 设置需要生成的表名&#10;    }&#10;&#10;    /**&#10;     * 数据源配置&#10;     */&#10;    private static final DataSourceConfig DATA_SOURCE_CONFIG = new DataSourceConfig&#10;            .Builder(&quot;jdbc:h2:mem:test;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE;CASE_INSENSITIVE_IDENTIFIERS=TRUE;MODE=MYSQL&quot;, &quot;sa&quot;, &quot;&quot;)&#10;            .databaseQueryClass(SQLQuery.class) // 设置SQL查询方式，默认的是元数据查询方式&#10;            .build();&#10;&#10;    /**&#10;     * 简单生成&#10;     */&#10;    @Test&#10;    public void testSimple() {&#10;        AutoGenerator generator = new AutoGenerator(DATA_SOURCE_CONFIG);&#10;        generator.strategy(strategyConfig().build());&#10;        generator.global(globalConfig().build());&#10;        generator.execute();&#10;    }&#10;&#10;    /**&#10;     * 过滤表前缀（后缀同理，支持多个）&#10;     * result: t_simple -&gt; simple&#10;     */&#10;    @Test&#10;    public void testTablePrefix() {&#10;        AutoGenerator generator = new AutoGenerator(DATA_SOURCE_CONFIG);&#10;        generator.strategy(strategyConfig().addTablePrefix(&quot;t_&quot;, &quot;c_&quot;).build());&#10;        generator.global(globalConfig().build());&#10;        generator.execute();&#10;    }&#10;&#10;    /**&#10;     * 过滤字段后缀（前缀同理，支持多个）&#10;     * result: deleted_flag -&gt; deleted&#10;     */&#10;    @Test&#10;    public void testFieldSuffix() {&#10;        AutoGenerator generator = new AutoGenerator(DATA_SOURCE_CONFIG);&#10;        generator.strategy(strategyConfig().addFieldSuffix(&quot;_flag&quot;).build());&#10;        generator.global(globalConfig().build());&#10;        generator.execute();&#10;    }&#10;&#10;    /**&#10;     * 乐观锁字段设置&#10;     * result: 新增@Version注解&#10;     * 填充字段设置&#10;     * result: 新增@TableField(value = &quot;xxx&quot;, fill = FieldFill.xxx)注解&#10;     */&#10;    @Test&#10;    public void testVersionAndFill() {&#10;        AutoGenerator generator = new AutoGenerator(DATA_SOURCE_CONFIG);&#10;        generator.strategy(strategyConfig().entityBuilder()&#10;                .versionColumnName(&quot;version&quot;) // 基于数据库字段&#10;                .versionPropertyName(&quot;version&quot;)// 基于模型属性&#10;                .addTableFills(new Column(&quot;create_time&quot;, FieldFill.INSERT))    //基于数据库字段填充&#10;                .addTableFills(new Property(&quot;updateTime&quot;, FieldFill.INSERT_UPDATE))    //基于模型属性填充&#10;                .build());&#10;        generator.global(globalConfig().build());&#10;        generator.execute();&#10;    }&#10;&#10;    /**&#10;     * 逻辑删除字段设置&#10;     * result: 新增@TableLogic注解&#10;     * 忽略字段设置&#10;     * result: 不生成&#10;     */&#10;    @Test&#10;    public void testLogicDeleteAndIgnoreColumn() {&#10;        AutoGenerator generator = new AutoGenerator(DATA_SOURCE_CONFIG);&#10;        generator.strategy(strategyConfig().entityBuilder()&#10;                .logicDeleteColumnName(&quot;deleted&quot;) // 基于数据库字段&#10;                .logicDeletePropertyName(&quot;deleteFlag&quot;)// 基于模型属性&#10;                .addIgnoreColumns(&quot;age&quot;) // 基于数据库字段&#10;                .build());&#10;        generator.global(globalConfig().build());&#10;        generator.execute();&#10;    }&#10;&#10;    /**&#10;     * 重命名模板生成的文件名称&#10;     * result: TSimple -&gt; TSimpleEntity&#10;     */&#10;    @Test&#10;    public void testCustomTemplateName() {&#10;        AutoGenerator generator = new AutoGenerator(DATA_SOURCE_CONFIG);&#10;        generator.strategy(strategyConfig()&#10;                .entityBuilder().formatFileName(&quot;%sEntity&quot;)&#10;                .mapperBuilder().formatMapperFileName(&quot;%sDao&quot;).formatXmlFileName(&quot;%sXml&quot;)&#10;                .controllerBuilder().formatFileName(&quot;%sAction&quot;)&#10;                .serviceBuilder().formatServiceFileName(&quot;%sService&quot;).formatServiceImplFileName(&quot;%sServiceImp&quot;)&#10;                .build());&#10;        generator.global(globalConfig().build());&#10;        generator.execute();&#10;    }&#10;&#10;    /**&#10;     * 更改模板生成的文件路径&#10;     *&#10;     * @see OutputFile&#10;     */&#10;    @Test&#10;    public void testCustomTemplatePath() {&#10;        // 设置自定义路径&#10;        Map&lt;OutputFile, String&gt; pathInfo = new HashMap&lt;&gt;();&#10;        pathInfo.put(OutputFile.xml, &quot;D://&quot;);&#10;        pathInfo.put(OutputFile.entity, &quot;D://entity//&quot;);&#10;        AutoGenerator generator = new AutoGenerator(DATA_SOURCE_CONFIG);&#10;        generator.strategy(strategyConfig().build());&#10;        generator.packageInfo(packageConfig().pathInfo(pathInfo).build());&#10;        generator.global(globalConfig().build());&#10;        generator.execute();&#10;    }&#10;&#10;    /**&#10;     * 替换模板&#10;     */&#10;    @Test&#10;    public void testCustomTemplate() {&#10;        AutoGenerator generator = new AutoGenerator(DATA_SOURCE_CONFIG);&#10;        generator.strategy(strategyConfig().build());&#10;        generator.template(templateConfig()&#10;                .entity(&quot;/templates/entity1.java&quot;)&#10;                .build());&#10;        generator.global(globalConfig().build());&#10;        generator.execute();&#10;    }&#10;&#10;    /**&#10;     * 注入自定义属性&#10;     */&#10;    @Test&#10;    public void testCustomMap() {&#10;        // 设置自定义属性&#10;        Map&lt;String, Object&gt; map = new HashMap&lt;&gt;();&#10;        map.put(&quot;abc&quot;, 123);&#10;        AutoGenerator generator = new AutoGenerator(DATA_SOURCE_CONFIG);&#10;        generator.strategy(strategyConfig().build());&#10;        generator.template(templateConfig()&#10;                .entity(&quot;/templates/entity1.java&quot;)&#10;                .build());&#10;        generator.injection(injectionConfig().customMap(map).build());&#10;        generator.global(globalConfig().build());&#10;        generator.execute();&#10;    }&#10;&#10;    /**&#10;     * 自定义模板（Map）&#10;     * key为文件名称，value为文件路径&#10;     */&#10;    @Test&#10;    public void testCustomFileByMap() {&#10;        // 设置自定义输出文件&#10;        Map&lt;String, String&gt; customFile = new HashMap&lt;&gt;();&#10;        customFile.put(&quot;DTO.java&quot;, &quot;/templates/dto.java.vm&quot;);&#10;        AutoGenerator generator = new AutoGenerator(DATA_SOURCE_CONFIG);&#10;        generator.strategy(strategyConfig().build());&#10;        generator.injection(injectionConfig().customFile(customFile).build());&#10;        generator.global(globalConfig().build());&#10;        generator.execute();&#10;    }&#10;&#10;    /**&#10;     * 自定义模板（单个文件）&#10;     */&#10;    @Test&#10;    public void testCustomFileBySingle() {&#10;        // 设置自定义输出文件&#10;        CustomFile customFile = new CustomFile.Builder().fileName(&quot;DTO.java&quot;).templatePath(&quot;/templates/dto.java.vm&quot;).packageName(&quot;dto&quot;).build();&#10;        AutoGenerator generator = new AutoGenerator(DATA_SOURCE_CONFIG);&#10;        generator.strategy(strategyConfig().build());&#10;        generator.injection(injectionConfig().customFile(customFile).build());&#10;        generator.global(globalConfig().build());&#10;        generator.execute();&#10;    }&#10;&#10;    /**&#10;     * 自定义模板（列表）&#10;     */&#10;    @Test&#10;    public void testCustomFileByList() {&#10;        // 设置自定义输出文件&#10;        List&lt;CustomFile&gt; customFiles = new ArrayList&lt;&gt;();&#10;        customFiles.add(new CustomFile.Builder().fileName(&quot;DTO.java&quot;).templatePath(&quot;/templates/dto.java.vm&quot;).packageName(&quot;dto&quot;).build());&#10;        customFiles.add(new CustomFile.Builder().fileName(&quot;VO.java&quot;).templatePath(&quot;/templates/vo.java.vm&quot;).packageName(&quot;vo&quot;).build());&#10;        AutoGenerator generator = new AutoGenerator(DATA_SOURCE_CONFIG);&#10;        generator.strategy(strategyConfig().build());&#10;        generator.injection(injectionConfig().customFile(customFiles).build());&#10;        generator.global(globalConfig().build());&#10;        generator.execute();&#10;    }&#10;&#10;    /**&#10;     * 自定义模板（列表）&#10;     */&#10;    @Test&#10;    public void testCustomFileByLambda() {&#10;        // 设置自定义属性&#10;        Map&lt;String, Object&gt; map = new HashMap&lt;&gt;();&#10;        map.put(&quot;abc&quot;, 118);&#10;        // 设置自定义输出文件&#10;        AutoGenerator generator = new AutoGenerator(DATA_SOURCE_CONFIG);&#10;        generator.strategy(strategyConfig().build());&#10;        generator.injection(injectionConfig()&#10;                .customMap(map)&#10;                .customFile(file -&gt;&#10;                        file.fileName(&quot;DTO.java&quot;)&#10;                                .templatePath(&quot;/templates/dto.java.vm&quot;)&#10;                                .filePath(&quot;D://&quot;))&#10;                .customFile(file -&gt;&#10;                        file.fileName(&quot;VO.java&quot;)&#10;                                .templatePath(&quot;/templates/vo.java.vm&quot;)&#10;                                .enableFileOverride()&#10;                                .filePath(&quot;D://&quot;))&#10;                .build());&#10;        generator.global(globalConfig().build());&#10;        generator.execute();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>